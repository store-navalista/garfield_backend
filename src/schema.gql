# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Job {
  id: Float!
  ship_name: String
  job_description: String
  project_number: String
  hours_worked: [Float!]
  report_period: String
  name_of_company_locale: WorkCompanyType
  order: Float!
  notes: String
  user: User!
}

"""Company types involved in work"""
enum WorkCompanyType {
  EXTERNAL
  INTERNAL
}

type User {
  id: String!
  describe_name: String!
  describe_date: String
  describe_specialization: String
  describe_position: String
  describe_role: String!
  name_of_company_locale: String!
  currentTask: String
  jobs: [Job!]!
  describe_password: String!
  mail: String
}

type Token {
  access_token: String!
  refresh_token: String!
}

type CurrencyRate {
  baseCurrency: String
  quoteCurrency: String
  crossRate: String
  buy: String
  sell: String
}

type FileType {
  id: ID!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type FileResponse {
  fileName: String!
  size: Float!
  buffer: String!
}

"""ErrorMessage scalar type"""
scalar ErrorMessage

"""Buffer custom scalar type"""
scalar Buffer

type Query {
  getCTO: User
  getUser(userId: String!): User
  getUsers: [User]!
  getJobsByUserIdAndPeriod(userId: String!, period: String!): [Job]!
  getJobsByUserId(userId: String!): [Job]!
  getCurrency(pair: [String!]!): CurrencyRate
  checkAuth: User!
  getFile(filePath: String!, fileName: String!): FileResponse
  getAllBusinessWorkByType(type: String!): [BusinessWork!]!
  getAllBusinessWorkAllTypes: [BusinessWork!]!
  getBusinessWorksNumbers(type: String!): [Float!]!
  getParticipantsByType(type: String!): [Participant!]!
}

union BusinessWork = BusinessWorkDesign | BusinessWorkEngineering | BusinessWorkSupply | BusinessWorkUTM

type BusinessWorkDesign {
  id: String!
  work_number: Float!
  name_of_vessel: String!
  name_of_work: String!
  rate_usd_currency: Float!
  agreement_currency: CurrencyType!
  name_of_company: String!
  name_of_company_locale: WorkCompanyType!
  coef_usd: Float!
  work_status: String!
  salary_usd: Float!
  travelling_expenses_currency: Float!
  outsourcing_approval_expenses_currency: Float!
  bakshish_currency: Float!
  estimated_working_hours: Float!
  agreement_cost_currency: Float!
  start_of_work: String!
  end_of_work: String!
  contractor: String!
  invoice_no: String!
  payment_sum: Float!
  date_paid: String!
  actual_working_hours: Float!
}

"""Supported currencies"""
enum CurrencyType {
  USD
  UAH
  EUR
}

type BusinessWorkEngineering {
  id: String!
  work_number: Float!
  name_of_vessel: String!
  name_of_work: String!
  name_of_company: String!
  name_of_company_locale: WorkCompanyType!
  executor: String!
  agreement_currency: CurrencyType!
  rate_usd_currency: Float!
  coef_usd: Float!
  work_status: String!
  agreement_cost_currency: Float!
  agreement_cost_of_work_day_person_currency: Float!
  extra_day_cost_day_person_currency: Float!
  day_started: String!
  day_finished: String!
  travelling_days_currency: Float!
  accomodation_expenses_currency: Float!
  other_expenses_currency: Float!
  bakshish_currency: Float!
  salary: Float!
  contractor: String!
  invoice_no: String!
  payment_sum: Float!
  date_paid: String!
}

type BusinessWorkSupply {
  id: String!
  work_number: Float!
  name_of_vessel: String!
  name_of_work: String!
  name_of_company: String!
  name_of_company_locale: WorkCompanyType!
  rate_usd_currency: Float!
  executor: String!
  agreement_currency: CurrencyType!
  coef_usd: Float!
  work_status: String!
  contract_price_currency: Float!
  price_for_supplier: Float!
  margin: Float!
  expected_expenses: Float!
  delivery_expenses: Float!
  expected_commission: Float!
  date_started: String!
  advance_payment: Float!
  invoice_no: String!
  date_paid: String!
  final_payment: Float!
  date_of_delivery: String!
}

type BusinessWorkUTM {
  id: String!
  work_number: Float!
  name_of_vessel: String!
  name_of_work: String!
  name_of_company: String!
  name_of_company_locale: WorkCompanyType!
  rate_usd_currency: Float!
  agreement_currency: CurrencyType!
  executor: String!
  coef_usd: Float!
  work_status: String!
  agreement_cost_utm_currency: Float!
  agreement_cost_supervision_currency: Float!
  utm_extra_day_cost_currency: Float!
  day_utm_started: String!
  day_utm_finished: String!
  day_supervision_started: String!
  day_supervision_finished: String!
  day_extra_days_started: String!
  day_extra_days_finished: String!
  travelling_expenses_currency: Float!
  accomodation_expenses_currency: Float!
  other_expenses_currency: Float!
  bakshish_currency: Float!
  supervision_cost_total_currency: Float!
  extra_days_cost_total_currency: Float!
  total_cost_with_currency: Float!
  total_cost_with_expenses_currency: Float!
  salary: Float!
  contractor: String!
  invoice_no: String!
  payment_sum: Float!
  date_paid: String!
}

union Participant = Vessel | Executor | Contractor

type Vessel {
  id: String!
  IMO: Float!
  name_of_vessel: String!
  imo_frozen: Boolean!
}

type Executor {
  id: String!
  executor_name: String!
  description: String
}

type Contractor {
  id: String!
  contractor_name: String!
  description: String
}

type Mutation {
  createModerator(createModeratorInput: CreateModeratorInput!): User!
  createUser(createUserData: CreateUserInput!): User!
  updateUser(id: String!, updateUserData: UpdateUserInput!): User!
  deleteUser(id: String!): Boolean
  updatePassword(id: String!, newPassword: String!): Boolean!
  updateJobsByUserIdAndPeriod(updateJobsData: UpdateJobsInput!): [Job!]!
  logout: Boolean!
  login(loginDto: LoginInput!): Token
  refresh: Token
  uploadFile(file: Upload!): FileType!
  backupDB: Boolean!
  deleteWorkByTypeAndId(type: String!, id: String!): Boolean!
  createBusinessWork(type: String!): BusinessWork!
  updateBusinessWork(type: String!, updateBusinessWorkInput: UpdateBusinessWorkInput!): BusinessWork!
  updateBusinessWorks(type: String!, updateBusinessWorkInput: [UpdateBusinessWorkInput!]!): [BusinessWork!]!
  getBusinessWorksByParameter(type: String!, parameter: String!, value: String!): [BusinessWork!]
  deleteParticipant(type: String!, id: String!): Boolean
  createParticipant(type: String!, createParticipantData: ParticipantData!): Participant!
  updateParticipants(type: String!, updateParticipantsData: [ParticipantData!]!): Boolean!
}

input CreateModeratorInput {
  describe_password: String!
  describe_role: String
  mail: String
}

input CreateUserInput {
  CTO: Boolean
  describe_name: String!
  describe_password: String!
  describe_date: String
  describe_specialization: String
  describe_position: String
  describe_role: String
  mail: String
}

input UpdateUserInput {
  describe_name: String!
  describe_date: String
  describe_specialization: String
  describe_position: String
  describe_role: String
  mail: String
}

input UpdateJobsInput {
  userId: String!
  period: String!
  jobs: [CreateJobData!]!
}

input CreateJobData {
  id: Float
  job_description: String!
  project_number: String!
  ship_name: String!
  name_of_company_locale: WorkCompanyType
  hours_worked: [Float!]!
  report_period: String!
  order: Float!
  notes: String
}

input LoginInput {
  username: String!
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateBusinessWorkInput {
  id: String
  work_number: Float
  name_of_vessel: String
  name_of_work: String
  rate_usd_currency: Float
  agreement_currency: CurrencyType
  name_of_company: String
  name_of_company_locale: WorkCompanyType
  coef_usd: Float
  work_status: String
  salary_usd: Float
  travelling_expenses_currency: Float
  outsourcing_approval_expenses_currency: Float
  bakshish_currency: Float
  estimated_working_hours: Float
  agreement_cost_currency: Float
  start_of_work: String
  end_of_work: String
  contractor: String
  invoice_no: String
  payment_sum: Float
  date_paid: String
  actual_working_hours: Float
  executor: TypeExecutorEngineering
  agreement_cost_of_work_day_person_currency: Float
  extra_day_cost_day_person_currency: Float
  day_started: String
  day_finished: String
  travelling_days_currency: Float
  accomodation_expenses_currency: Float
  other_expenses_currency: Float
  salary: Float
}

"""Types of engineering executors"""
enum TypeExecutorEngineering {
  empty
  ROK_AJ
  ROK_OOV
  OOV_AJ
  AOV
  DVC
  IS
  SB
  VSH
  ROK
  AJ
  OOV
}

input ParticipantData {
  id: String
  name_of_vessel: String
  IMO: Float
  imo_frozen: Boolean
  executor_name: String
  contractor_name: String
  description: String
}